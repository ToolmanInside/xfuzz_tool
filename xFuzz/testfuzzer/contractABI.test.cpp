#include <iostream>

#include "gtest/gtest.h"
#include <libfuzzer/ContractABI.h>

using namespace fuzzer;

TEST(ABIParser, DISABLED_parseJSON)
{
  string json = "[{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"bytes\"},{\"name\":\"c\",\"type\":\"bytes[]\"},{\"name\":\"d\",\"type\":\"bytes[][]\"},{\"name\":\"e\",\"type\":\"int256[]\"},{\"name\":\"f\",\"type\":\"int256[][]\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
  ContractABI ca(json);
  bytes data = ca.randomTestcase();
  bytes temp(1984, 0);
  bytes randomResult(32, 5);
  randomResult.insert(randomResult.end(), temp.begin(), temp.end());
  bytes randomResult1(32, 10);
  randomResult1.insert(randomResult1.end(), temp.begin(), temp.end());
  EXPECT_EQ(data, randomResult);
  EXPECT_TRUE(data.size() % 32 == 0);
  ca.updateTestData(randomResult1);
  EXPECT_EQ(ca.encodeConstructor(), bytes(0, 0));
  //vector<bytes> vs = ca.encodeFunctions();
  //for (auto v : vs) {
  //  cout << data.size() << endl;
  //}
}


TEST(ContractABI, DISABLED_TypeDef001)
{
  TypeDef td1("uint32");
  TypeDef td2("bool");
  td1.addValue(fromHex("0x45"));
  td2.addValue(fromHex("0x01"));
  vector<TypeDef> tds = { td1, td2 };
  ContractABI ca;
  bytes ret = ca.encodeTuple(tds);
  bytes selector = ca.functionSelector("baz", tds);
  EXPECT_EQ(ret, fromHex("00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"));
  EXPECT_EQ(selector, fromHex("0xcdcd77c0"));
}
//
TEST(ContractABI, DISABLED_TypeDef002)
{
  TypeDef td1("bytes3[2]");
  td1.addValue(vector<bytes> { fromHex("0x616263"), fromHex("0x646566")});
  vector<TypeDef> tds = { td1 };
  ContractABI ca;
  bytes ret = ca.encodeTuple(tds);
  bytes selector = ca.functionSelector("bar", tds);
  EXPECT_EQ(ret, fromHex("61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(selector, fromHex("0xfce353f6"));
}
//
TEST(ContractABI, DISABLED_TypeDef003)
{
  TypeDef td1("bytes");
  TypeDef td2("bool");
  TypeDef td3("uint256[]");
  td1.addValue(fromHex("64617665"));
  td2.addValue(fromHex("01"));
  td3.addValue(vector<bytes>{ fromHex("01"), fromHex("02"), fromHex("03")});
  vector<TypeDef> tds = { td1, td2, td3 };
  ContractABI ca;
  bytes ret = ca.encodeTuple(tds);
  bytes selector = ca.functionSelector("sam", tds);
  EXPECT_EQ(ret, fromHex("0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"));
  EXPECT_EQ(selector, fromHex("0xa5643bf2"));
}
//
TEST(ContractABI, DISABLED_TypeDef004)
{
  TypeDef td1("uint");
  TypeDef td2("uint32[]");
  TypeDef td3("bytes10");
  TypeDef td4("bytes");
  td1.addValue(fromHex("0x123"));
  td2.addValue(vector<bytes> { fromHex("0x456"), fromHex("0x789")});
  td3.addValue(fromHex("0x31323334353637383930"));
  td4.addValue(fromHex("0x48656c6c6f2c20776f726c6421"));
  vector<TypeDef> tds = { td1, td2, td3, td4 };
  ContractABI ca;
  bytes ret = ca.encodeTuple(tds);
  bytes selector = ca.functionSelector("f", tds);
  EXPECT_EQ(ret, fromHex("00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000"));
  EXPECT_EQ(selector, fromHex("0x8be65246"));
}
//
TEST(ContractABI, DISABLED_TypeDef005)
{
  // g(uint[][],string[])
  // ([[1, 2], [3]], ["one", "two", "three"])
  TypeDef td1("uint[][]");
  TypeDef td2("string[]");
  td1.addValue({{fromHex("0x01"), fromHex("0x02")}, {fromHex("0x03")}});
  td2.addValue({fromHex("6f6e65"), fromHex("0x74776f"), fromHex("0x7468726565")});
  vector<TypeDef> tds = { td1, td2 };
  ContractABI ca;
  bytes ret = ca.encodeTuple(tds);
  EXPECT_EQ(ret, fromHex("000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000"));
}

TEST(ContractABI, DISABLED_typeDef)
{
  TypeDef td1("uint");
  TypeDef td2("int8");
  td1.addValue(fromHex("0x11"));
  td2.addValue(fromHex("0x22"));
  vector<TypeDef> tds = {td1, td2};
  ContractABI ca;
  bytes ret = ca.encodeTuple(tds);
  EXPECT_EQ(ret, fromHex("00000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000022"));
}
//
TEST(ContractABI, DISABLED_encode2DArray)
{
  DataType dt1(fromHex("0x01"), true, false);
  DataType dt2(fromHex("0x02"), true, false);
  DataType dt3(fromHex("0x03"), true, false);
  vector<DataType> dts1 = {dt1, dt2};
  vector<DataType> dts2 = {dt3};
  vector<vector<DataType>> dtss = {dts1, dts2};
  ContractABI ca;
  bytes ret = ca.encode2DArray(dtss, true, true);
  EXPECT_EQ(ret, fromHex("0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003"));
}
//
TEST(ContractABI, DISABLED_encodeArrayDynamic)
{
  DataType dt1(fromHex("0xffffff"), false, true);
  DataType dt2(fromHex("0xaaaaaa"), false, true);
  DataType dt3(fromHex("0xdddddddddd"), false, true);
  vector<DataType> dts = { dt1, dt2, dt3};
  ContractABI ca;
  bytes ret = ca.encodeArray(dts, true);
  EXPECT_EQ(ret, fromHex("0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000003ffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003aaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005dddddddddd000000000000000000000000000000000000000000000000000000"));
}
//
TEST(ContractABI, DISABLED_encodeArrayStatic)
{
  DataType dt1(fromHex("0xffff"), false, true);
  DataType dt2(fromHex("0xaaaa"), false, true);
  vector<DataType> dts = { dt1, dt2 };
  ContractABI ca;
  bytes ret = ca.encodeArray(dts, false);
  EXPECT_EQ(ret, fromHex("0000000000000000000000000000000000000000000000000000000000000002ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000"));
}
//
TEST(ContractABI, DISABLED_encodeSingle)
{
  bytes value = fromHex("0xffff");
  DataType l(value, true /* pad left*/, true /* isDynamic */);
  DataType r(value, false, false);
  EXPECT_EQ(l.header(), fromHex("0000000000000000000000000000000000000000000000000000000000000002"));
  EXPECT_EQ(r.header(), fromHex("0000000000000000000000000000000000000000000000000000000000000002"));
  EXPECT_EQ(l.payload(), fromHex("000000000000000000000000000000000000000000000000000000000000ffff"));
  EXPECT_EQ(r.payload(), fromHex("ffff000000000000000000000000000000000000000000000000000000000000"));
  ContractABI ca;
  EXPECT_EQ(ca.encodeSingle(l), fromHex("0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000ffff"));
  EXPECT_EQ(ca.encodeSingle(r), fromHex("ffff000000000000000000000000000000000000000000000000000000000000"));
  bytes longValue = bytes(33, 0);
  DataType ll(longValue, false, true);
  EXPECT_EQ(ll.payload().size(), 64);
  EXPECT_EQ(ca.encodeSingle(ll).size(), 96);
}

